
Fire_Smoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000490  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000628  08000630  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000628  08000628  00001630  2**0
                  CONTENTS
  4 .ARM          00000000  08000628  08000628  00001630  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000628  08000630  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000628  08000628  00001628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800062c  0800062c  0000162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000630  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000630  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ff8  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000541  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00002ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000aa  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e135  00000000  00000000  00002d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001de6  00000000  00000000  00010e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050191  00000000  00000000  00012c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00062dfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000023c  00000000  00000000  00062e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00063080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000610 	.word	0x08000610

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000610 	.word	0x08000610

080001d8 <flame_sensor_init>:
 */


#include "flame_sensor.h"

void flame_sensor_init (void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0

	/***Configure Pin***/

	/*Enable Clock access to pin PA15*/
	RCC-> AHB1ENR |= GPIOAEN;
 80001dc:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <flame_sensor_init+0x34>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a0a      	ldr	r2, [pc, #40]	@ (800020c <flame_sensor_init+0x34>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Initialize PA15 mode*/
	//clear and explicitly state it to ensure input mode
	GPIOA->MODER &=~(1U<<31);
 80001e8:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <flame_sensor_init+0x38>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	@ (8000210 <flame_sensor_init+0x38>)
 80001ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<30);
 80001f4:	4b06      	ldr	r3, [pc, #24]	@ (8000210 <flame_sensor_init+0x38>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a05      	ldr	r2, [pc, #20]	@ (8000210 <flame_sensor_init+0x38>)
 80001fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80001fe:	6013      	str	r3, [r2, #0]


	/*Read data from PA15*/
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800
 8000210:	40020000 	.word	0x40020000

08000214 <flame_sensor_read>:


uint32_t flame_sensor_read(void){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0


	return (GPIOA->IDR & (1U << 15));  // Read PA15
 8000218:	4b04      	ldr	r3, [pc, #16]	@ (800022c <flame_sensor_read+0x18>)
 800021a:	691b      	ldr	r3, [r3, #16]
 800021c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000

}
 8000220:	4618      	mov	r0, r3
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020000 	.word	0x40020000

08000230 <main>:
uint16_t volatile fire_detector;
uint16_t volatile smoke_detector;

bool volatile firee;
bool volatile smokee;
int main(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0


	flame_sensor_init();
 8000234:	f7ff ffd0 	bl	80001d8 <flame_sensor_init>
	smoke_adc_init();
 8000238:	f000 f8a8 	bl	800038c <smoke_adc_init>
	start_adc_conv();
 800023c:	f000 f8de 	bl	80003fc <start_adc_conv>
	led_init();
 8000240:	f000 f87a 	bl	8000338 <led_init>

	/***Configure leds***/
	uart_init();
 8000244:	f000 f930 	bl	80004a8 <uart_init>

	;

	while(1){

		fire_detector = flame_sensor_read();
 8000248:	f7ff ffe4 	bl	8000214 <flame_sensor_read>
 800024c:	4603      	mov	r3, r0
 800024e:	b29a      	uxth	r2, r3
 8000250:	4b16      	ldr	r3, [pc, #88]	@ (80002ac <main+0x7c>)
 8000252:	801a      	strh	r2, [r3, #0]
		firee = fire_presence(fire_detector);
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <main+0x7c>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b29b      	uxth	r3, r3
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f82e 	bl	80002bc <fire_presence>
 8000260:	4603      	mov	r3, r0
 8000262:	461a      	mov	r2, r3
 8000264:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <main+0x80>)
 8000266:	701a      	strb	r2, [r3, #0]

		smoke_detector = read_smoke_val();
 8000268:	f000 f8d8 	bl	800041c <read_smoke_val>
 800026c:	4603      	mov	r3, r0
 800026e:	b29a      	uxth	r2, r3
 8000270:	4b10      	ldr	r3, [pc, #64]	@ (80002b4 <main+0x84>)
 8000272:	801a      	strh	r2, [r3, #0]
		smokee =smoke_presence(smoke_detector);
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <main+0x84>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	b29b      	uxth	r3, r3
 800027a:	4618      	mov	r0, r3
 800027c:	f000 f83c 	bl	80002f8 <smoke_presence>
 8000280:	4603      	mov	r3, r0
 8000282:	461a      	mov	r2, r3
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <main+0x88>)
 8000286:	701a      	strb	r2, [r3, #0]

		if (firee || smokee){
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <main+0x80>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d104      	bne.n	800029c <main+0x6c>
 8000292:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <main+0x88>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0d5      	beq.n	8000248 <main+0x18>
			UART_write('O');
 800029c:	204f      	movs	r0, #79	@ 0x4f
 800029e:	f000 f951 	bl	8000544 <UART_write>
			systickDelay(3);
 80002a2:	2003      	movs	r0, #3
 80002a4:	f000 f8cc 	bl	8000440 <systickDelay>
		fire_detector = flame_sensor_read();
 80002a8:	e7ce      	b.n	8000248 <main+0x18>
 80002aa:	bf00      	nop
 80002ac:	2000001c 	.word	0x2000001c
 80002b0:	20000020 	.word	0x20000020
 80002b4:	2000001e 	.word	0x2000001e
 80002b8:	20000021 	.word	0x20000021

080002bc <fire_presence>:
    while(*str != '\0'){
        UART_write(*str);  // Send the current character
        str++;             // Move to the next character in the string
    }
}
bool fire_presence (uint32_t volatile f_val){
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]

	if (f_val > 0){
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d007      	beq.n	80002da <fire_presence+0x1e>

		GPIOC->ODR &= ~(1U << 2); //set bit 3 (PC3 low)
 80002ca:	4b0a      	ldr	r3, [pc, #40]	@ (80002f4 <fire_presence+0x38>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	4a09      	ldr	r2, [pc, #36]	@ (80002f4 <fire_presence+0x38>)
 80002d0:	f023 0304 	bic.w	r3, r3, #4
 80002d4:	6153      	str	r3, [r2, #20]
		return false ;
 80002d6:	2300      	movs	r3, #0
 80002d8:	e006      	b.n	80002e8 <fire_presence+0x2c>
			}
	else {
		GPIOC->ODR |= (1U << 2);     // Set bit 3 (PC3 high)
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <fire_presence+0x38>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a05      	ldr	r2, [pc, #20]	@ (80002f4 <fire_presence+0x38>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	6153      	str	r3, [r2, #20]
		return true;
 80002e6:	2301      	movs	r3, #1
	}
	systickDelay(3);

}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40020800 	.word	0x40020800

080002f8 <smoke_presence>:
bool smoke_presence (uint32_t volatile s_val){
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if (s_val > 700){
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000306:	d907      	bls.n	8000318 <smoke_presence+0x20>


				GPIOC->ODR |= (1U << 3);     // Set bit 3 (PC3 high)
 8000308:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <smoke_presence+0x3c>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a09      	ldr	r2, [pc, #36]	@ (8000334 <smoke_presence+0x3c>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6153      	str	r3, [r2, #20]
				return true;
 8000314:	2301      	movs	r3, #1
 8000316:	e006      	b.n	8000326 <smoke_presence+0x2e>

	}
	else {

				GPIOC->ODR &= ~(1U << 3); //set bit 3 (PC3 low)
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <smoke_presence+0x3c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <smoke_presence+0x3c>)
 800031e:	f023 0308 	bic.w	r3, r3, #8
 8000322:	6153      	str	r3, [r2, #20]
				return false;
 8000324:	2300      	movs	r3, #0
	}
	systickDelay(3);


}
 8000326:	4618      	mov	r0, r3
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40020800 	.word	0x40020800

08000338 <led_init>:

void led_init(void){
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |=(1U<<2);
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <led_init+0x4c>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <led_init+0x4c>)
 8000342:	f043 0304 	orr.w	r3, r3, #4
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30

	/*init PC3 led*/
	GPIOC->MODER &=~(1U<<7);
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <led_init+0x50>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a0e      	ldr	r2, [pc, #56]	@ (8000388 <led_init+0x50>)
 800034e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000352:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(1U<<6);
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <led_init+0x50>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <led_init+0x50>)
 800035a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800035e:	6013      	str	r3, [r2, #0]

	/*init PC2 led*/
	GPIOC->MODER &=~(1U<<5);
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <led_init+0x50>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <led_init+0x50>)
 8000366:	f023 0320 	bic.w	r3, r3, #32
 800036a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(1U<<4);
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <led_init+0x50>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a05      	ldr	r2, [pc, #20]	@ (8000388 <led_init+0x50>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40023800 	.word	0x40023800
 8000388:	40020800 	.word	0x40020800

0800038c <smoke_adc_init>:
 */


#include "smoke_adc.h"

void smoke_adc_init(void){
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOA_CLK_EN;
 8000390:	4b17      	ldr	r3, [pc, #92]	@ (80003f0 <smoke_adc_init+0x64>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000394:	4a16      	ldr	r2, [pc, #88]	@ (80003f0 <smoke_adc_init+0x64>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= GPIOA_MODE;
 800039c:	4b15      	ldr	r3, [pc, #84]	@ (80003f4 <smoke_adc_init+0x68>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a14      	ldr	r2, [pc, #80]	@ (80003f4 <smoke_adc_init+0x68>)
 80003a2:	f043 030c 	orr.w	r3, r3, #12
 80003a6:	6013      	str	r3, [r2, #0]

	RCC->APB2ENR |=ADC_CLK_EN;
 80003a8:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <smoke_adc_init+0x64>)
 80003aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <smoke_adc_init+0x64>)
 80003ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003b2:	6453      	str	r3, [r2, #68]	@ 0x44
	ADC1->SQR1 	 &= ~(ADC_CONV_LENGHT); //Explicitly clear and set pins to 0
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003b8:	4a0f      	ldr	r2, [pc, #60]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003be:	62d3      	str	r3, [r2, #44]	@ 0x2c
	ADC1->SQR3	 |= ADC_priority_1;
 80003c0:	4b0d      	ldr	r3, [pc, #52]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003c4:	4a0c      	ldr	r2, [pc, #48]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6353      	str	r3, [r2, #52]	@ 0x34
	ADC1->CR2	 |= ADC_cont_conv;
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6093      	str	r3, [r2, #8]
	ADC1->CR2	 |= ADC_ON;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	4a06      	ldr	r2, [pc, #24]	@ (80003f8 <smoke_adc_init+0x6c>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6093      	str	r3, [r2, #8]


}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40012000 	.word	0x40012000

080003fc <start_adc_conv>:

void start_adc_conv(void){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

	ADC1->CR2 |= ADC_start_conv;
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <start_adc_conv+0x1c>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <start_adc_conv+0x1c>)
 8000406:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800040a:	6093      	str	r3, [r2, #8]
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40012000 	.word	0x40012000

0800041c <read_smoke_val>:


uint32_t read_smoke_val(void){
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

	while (!(ADC1->SR & ADC_EOC)){} //wait for convertion to finish
 8000420:	bf00      	nop
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <read_smoke_val+0x20>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f003 0302 	and.w	r3, r3, #2
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f9      	beq.n	8000422 <read_smoke_val+0x6>


	return ADC1->DR;
 800042e:	4b03      	ldr	r3, [pc, #12]	@ (800043c <read_smoke_val+0x20>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000432:	4618      	mov	r0, r3
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	40012000 	.word	0x40012000

08000440 <systickDelay>:
 *  Created on: Sep 16, 2024
 *      Author: Aaron Gumba
 */

#include "systick_delay.h"
void systickDelay(int delay){
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	SysTick->LOAD = SYSTICK_LOAD_VAL;
 8000448:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <systickDelay+0x60>)
 800044a:	4a16      	ldr	r2, [pc, #88]	@ (80004a4 <systickDelay+0x64>)
 800044c:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = CLR_SYSTICK;
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <systickDelay+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= CLK_SOURCE;
 8000454:	4b12      	ldr	r3, [pc, #72]	@ (80004a0 <systickDelay+0x60>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a11      	ldr	r2, [pc, #68]	@ (80004a0 <systickDelay+0x60>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SYSTICK_EN;
 8000460:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <systickDelay+0x60>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <systickDelay+0x60>)
 8000466:	f043 0301 	orr.w	r3, r3, #1
 800046a:	6013      	str	r3, [r2, #0]

	for(int i =0 ; i< delay; i++){
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	e009      	b.n	8000486 <systickDelay+0x46>
		//wait until the countflag is set
		while ((SysTick->CTRL & FLAG)== 0){}
 8000472:	bf00      	nop
 8000474:	4b0a      	ldr	r3, [pc, #40]	@ (80004a0 <systickDelay+0x60>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800047c:	2b00      	cmp	r3, #0
 800047e:	d0f9      	beq.n	8000474 <systickDelay+0x34>
	for(int i =0 ; i< delay; i++){
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	3301      	adds	r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fa      	ldr	r2, [r7, #12]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	429a      	cmp	r2, r3
 800048c:	dbf1      	blt.n	8000472 <systickDelay+0x32>

	}

	SysTick->VAL  = CLR_SYSTICK;
 800048e:	4b04      	ldr	r3, [pc, #16]	@ (80004a0 <systickDelay+0x60>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	e000e010 	.word	0xe000e010
 80004a4:	00f42400 	.word	0x00f42400

080004a8 <uart_init>:
 *      Author: Aaron Gumba
 */
#include "uart_pi.h"


void uart_init(void){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

	RCC->AHB1ENR  |= GPIOA_CLK_EN;
 80004ac:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <uart_init+0x90>)
 80004ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b0:	4a21      	ldr	r2, [pc, #132]	@ (8000538 <uart_init+0x90>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER  |= GPIOA9_MODE;
 80004b8:	4b20      	ldr	r3, [pc, #128]	@ (800053c <uart_init+0x94>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a1f      	ldr	r2, [pc, #124]	@ (800053c <uart_init+0x94>)
 80004be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004c2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= GPIOA9_FUNC_MODE;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <uart_init+0x94>)
 80004c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c8:	4a1c      	ldr	r2, [pc, #112]	@ (800053c <uart_init+0x94>)
 80004ca:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80004ce:	6253      	str	r3, [r2, #36]	@ 0x24

	RCC->APB2ENR |= UART_CLK;
 80004d0:	4b19      	ldr	r3, [pc, #100]	@ (8000538 <uart_init+0x90>)
 80004d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004d4:	4a18      	ldr	r2, [pc, #96]	@ (8000538 <uart_init+0x90>)
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->BRR  |= UART_BD;
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <uart_init+0x98>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	4a17      	ldr	r2, [pc, #92]	@ (8000540 <uart_init+0x98>)
 80004e2:	f443 63d0 	orr.w	r3, r3, #1664	@ 0x680
 80004e6:	f043 0303 	orr.w	r3, r3, #3
 80004ea:	6093      	str	r3, [r2, #8]
	USART1->CR1  |= UART_EN;
 80004ec:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <uart_init+0x98>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <uart_init+0x98>)
 80004f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004f6:	60d3      	str	r3, [r2, #12]
	USART1->CR1  |= WORD_LENGHT;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <uart_init+0x98>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <uart_init+0x98>)
 80004fe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000502:	60d3      	str	r3, [r2, #12]
	USART1->CR2  |= STOP_13;
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <uart_init+0x98>)
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <uart_init+0x98>)
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	6113      	str	r3, [r2, #16]
	USART1->CR2  |= STOP_12;
 800050c:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <uart_init+0x98>)
 800050e:	4a0c      	ldr	r2, [pc, #48]	@ (8000540 <uart_init+0x98>)
 8000510:	691b      	ldr	r3, [r3, #16]
 8000512:	6113      	str	r3, [r2, #16]
	USART1->CR1  |= PCE;
 8000514:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <uart_init+0x98>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <uart_init+0x98>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800051e:	60d3      	str	r3, [r2, #12]

	USART1->CR1  |= TE;
 8000520:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <uart_init+0x98>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4a06      	ldr	r2, [pc, #24]	@ (8000540 <uart_init+0x98>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	60d3      	str	r3, [r2, #12]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	40011000 	.word	0x40011000

08000544 <UART_write>:


void UART_write(int ch){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

	while(!(USART1->SR & TXE)){}
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <UART_write+0x2c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <UART_write+0xa>

	USART1-> DR =(ch & 0xFF);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a04      	ldr	r2, [pc, #16]	@ (8000570 <UART_write+0x2c>)
 800055e:	b2db      	uxtb	r3, r3
 8000560:	6053      	str	r3, [r2, #4]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40011000 	.word	0x40011000

08000574 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000578:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	@ (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a2:	f000 f811 	bl	80005c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005a6:	f7ff fe43 	bl	8000230 <main>

080005aa <LoopForever>:

LoopForever:
  b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005b8:	08000630 	.word	0x08000630
  ldr r2, =_sbss
 80005bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005c0:	20000024 	.word	0x20000024

080005c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC_IRQHandler>
	...

080005c8 <__libc_init_array>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000600 <__libc_init_array+0x38>)
 80005cc:	4c0d      	ldr	r4, [pc, #52]	@ (8000604 <__libc_init_array+0x3c>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	2600      	movs	r6, #0
 80005d4:	42a6      	cmp	r6, r4
 80005d6:	d109      	bne.n	80005ec <__libc_init_array+0x24>
 80005d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000608 <__libc_init_array+0x40>)
 80005da:	4c0c      	ldr	r4, [pc, #48]	@ (800060c <__libc_init_array+0x44>)
 80005dc:	f000 f818 	bl	8000610 <_init>
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	2600      	movs	r6, #0
 80005e6:	42a6      	cmp	r6, r4
 80005e8:	d105      	bne.n	80005f6 <__libc_init_array+0x2e>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f0:	4798      	blx	r3
 80005f2:	3601      	adds	r6, #1
 80005f4:	e7ee      	b.n	80005d4 <__libc_init_array+0xc>
 80005f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fa:	4798      	blx	r3
 80005fc:	3601      	adds	r6, #1
 80005fe:	e7f2      	b.n	80005e6 <__libc_init_array+0x1e>
 8000600:	08000628 	.word	0x08000628
 8000604:	08000628 	.word	0x08000628
 8000608:	08000628 	.word	0x08000628
 800060c:	0800062c 	.word	0x0800062c

08000610 <_init>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr

0800061c <_fini>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr
